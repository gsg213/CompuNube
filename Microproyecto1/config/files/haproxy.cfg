global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	# An alternative list with additional directives can be obtained from
	#  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
	ssl-default-bind-options no-sslv3

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/sorry_page.http
	errorfile 504 /etc/haproxy/errors/504.http
	option allbackups
	balance roundrobin
	stats enable
   	stats auth admin:admin
   	stats uri /haproxy?stats
   	stats refresh 1s

frontend http
  bind *:80
  
  # detect capacity issues web_backend
  acl web_backend_not_cap nbsrv(web_backend) lt 2

  # return to web_backend
  acl web_backend_ready nbsrv(web_backend) gt 1

  # traffic to backupfull
  use_backend web_backupfull if web_backend_not_cap

  # return traffic to backend
  use_backend web_backend if web_backend_ready

  default_backend web_backend

backend web_backend

   server web1 web1.lxd:80 check
   server web2 web2.lxd:80 check

backend web_backupfull

   server backupWeb1 backupWeb1.lxd:80 check
   server backupWeb2 backupWeb2.lxd:80 check 


